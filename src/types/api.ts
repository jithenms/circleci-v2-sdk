/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/context': {
    /** List all contexts for an owner. */
    get: operations['listContexts'];
    post: operations['createContext'];
  };
  '/context/{context-id}': {
    /** Returns basic information about a context. */
    get: operations['getContext'];
    delete: operations['deleteContext'];
  };
  '/context/{context-id}/environment-variable': {
    /** List information about environment variables in a context, not including their values. */
    get: operations['listEnvironmentVariablesFromContext'];
  };
  '/context/{context-id}/environment-variable/{env-var-name}': {
    /** Create or update an environment variable within a context. Returns information about the environment variable, not including its value. */
    put: operations['addEnvironmentVariableToContext'];
    /** Delete an environment variable from a context. */
    delete: operations['deleteEnvironmentVariableFromContext'];
  };
  '/insights/pages/{project-slug}/summary': {
    /**
     * Get summary metrics and trends for a project at workflow and branch level.
     *              Workflow runs going back at most 90 days are included in the aggregation window.
     *              Trends are only supported upto last 30 days.
     *              Metrics are refreshed daily, and thus may not include executions from the last 24 hours.
     *              Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
     *              The most up to date credit information can be found in Plan Overview in the CircleCI UI.
     */
    get: operations['getProjectWorkflowsPageData'];
  };
  '/insights/time-series/{project-slug}/workflows': {
    /**
     * If no query parameters are supplied, will return timeseries data for all workflows that have ran on the default branch.
     *
     *             When granularity is `hourly`, up to 48 hours of timeseries data will be returned. When granularity is `daily`, up to 90 days of timeseries data will be returned.
     *
     *             Different combinations of branches and workflow-names can narrow the query further:
     *
     *              * All workflows, default branch (default, no query parameters)
     *              * All workflows, all branches: `all-branches=true`
     *              * All workflows on specific branch: `branch=feature-branch`
     *              * A specified workflow, all branches: `workflow-name=build&all-branches=true`,
     *              * A specified branch on a specified workflow: `workflow-name=build&branch=feature-branch`
     */
    get: operations['getWorkflowTimeseries'];
  };
  '/insights/time-series/{project-slug}/workflows/{workflow-name}/jobs': {
    /** Get timeseries data for all jobs within a workflow. */
    get: operations['getJobTimeseries'];
  };
  '/insights/{org-slug}/summary': {
    /**
     * Gets aggregated summary metrics with trends for the entire org.
     *               Also gets aggregated metrics and trends for each project belonging to the org.
     */
    get: operations['getOrgSummaryData'];
  };
  '/insights/{project-slug}/branches': {
    /** Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. */
    get: operations['getAllInsightsBranches'];
  };
  '/insights/{project-slug}/flaky-tests': {
    /**
     * Get a list of flaky tests for a given project. Flaky tests are branch agnostic.
     *              A flaky test is a test that passed and faliled in the same commit.
     */
    get: operations['getFlakyTests'];
  };
  '/insights/{project-slug}/workflows': {
    /** Get summary metrics for a project's workflows. Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI. */
    get: operations['getProjectWorkflowMetrics'];
  };
  '/insights/{project-slug}/workflows/{workflow-name}': {
    /** Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI. */
    get: operations['getProjectWorkflowRuns'];
  };
  '/insights/{project-slug}/workflows/{workflow-name}/jobs': {
    /** Get summary metrics for a project workflow's jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI. */
    get: operations['getProjectWorkflowJobMetrics'];
  };
  '/insights/{project-slug}/workflows/{workflow-name}/jobs/{job-name}': {
    /** Get recent runs of a job within a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI. */
    get: operations['getProjectJobRuns'];
  };
  '/insights/{project-slug}/workflows/{workflow-name}/summary': {
    /** Get the metrics and trends for a particular workflow on a single branch or all branches */
    get: operations['getWorkflowSummary'];
  };
  '/insights/{project-slug}/workflows/{workflow-name}/test-metrics': {
    /** Get test metrics for a project's workflows. Currently tests metrics are calculated based on 10 most recent workflow runs. */
    get: operations['getProjectWorkflowTestMetrics'];
  };
  '/me': {
    /** Provides information about the user that is currently signed in. */
    get: operations['getCurrentUser'];
  };
  '/me/collaborations': {
    /**
     * Provides the set of organizations of which a user is a member or a collaborator.
     *
     * The set of organizations that a user can collaborate on is composed of:
     *
     * * Organizations that the current user belongs to across VCS types (e.g. BitBucket, GitHub)
     * * The parent organization of repository that the user can collaborate on, but is not necessarily a member of
     * * The organization of the current user's account
     */
    get: operations['getCollaborations'];
  };
  '/pipeline': {
    /** Returns all pipelines for the most recently built projects (max 250) you follow in an organization. */
    get: operations['listPipelines'];
  };
  '/pipeline/continue': {
    /** Continue a pipeline from the setup phase. */
    post: operations['continuePipeline'];
  };
  '/pipeline/{pipeline-id}': {
    /** Returns a pipeline by ID. */
    get: operations['getPipelineById'];
  };
  '/pipeline/{pipeline-id}/config': {
    /** Returns a pipeline's configuration by ID. */
    get: operations['getPipelineConfigById'];
  };
  '/pipeline/{pipeline-id}/workflow': {
    /** Returns a paginated list of workflows by pipeline ID. */
    get: operations['listWorkflowsByPipelineId'];
  };
  '/project/{project-slug}': {
    /** Retrieves a project by project slug. */
    get: operations['getProjectBySlug'];
  };
  '/project/{project-slug}/checkout-key': {
    /** Returns a sequence of checkout keys for `:project`. */
    get: operations['listCheckoutKeys'];
    /** Creates a new checkout key. This API request is only usable with a user API token. */
    post: operations['createCheckoutKey'];
  };
  '/project/{project-slug}/checkout-key/{fingerprint}': {
    /** Returns an individual checkout key. */
    get: operations['getCheckoutKey'];
    /** Deletes the checkout key. */
    delete: operations['deleteCheckoutKey'];
  };
  '/project/{project-slug}/envvar': {
    /** Returns four 'x' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website. */
    get: operations['listEnvVars'];
    /** Creates a new environment variable. */
    post: operations['createEnvVar'];
  };
  '/project/{project-slug}/envvar/{name}': {
    /** Returns the masked value of environment variable :name. */
    get: operations['getEnvVar'];
    /** Deletes the environment variable named :name. */
    delete: operations['deleteEnvVar'];
  };
  '/project/{project-slug}/job/{job-number}': {
    /** Returns job details. */
    get: operations['getJobDetails'];
  };
  '/project/{project-slug}/job/{job-number}/cancel': {
    /** Cancel job with a given job number. */
    post: operations['cancelJob'];
  };
  '/project/{project-slug}/pipeline': {
    /** Returns all pipelines for this project. */
    get: operations['listPipelinesForProject'];
    /** Triggers a new pipeline on the project. */
    post: operations['triggerPipeline'];
  };
  '/project/{project-slug}/pipeline/mine': {
    /** Returns a sequence of all pipelines for this project triggered by the user. */
    get: operations['listMyPipelines'];
  };
  '/project/{project-slug}/pipeline/{pipeline-number}': {
    /** Returns a pipeline by number. */
    get: operations['getPipelineByNumber'];
  };
  '/project/{project-slug}/schedule': {
    /** Returns all schedules for this project. */
    get: operations['listSchedulesForProject'];
    /** Creates a schedule and returns the created schedule. */
    post: operations['createSchedule'];
  };
  '/project/{project-slug}/{job-number}/artifacts': {
    /** Returns a job's artifacts. */
    get: operations['getJobArtifacts'];
  };
  '/project/{project-slug}/{job-number}/tests': {
    /** Get test metadata for a build. In the rare case where there is more than 250MB of test data on the job, no results will be returned. */
    get: operations['getTests'];
  };
  '/schedule/{schedule-id}': {
    /** Get a schedule by id. */
    get: operations['getScheduleById'];
    /** Deletes the schedule by id. */
    delete: operations['deleteScheduleById'];
    /** Updates a schedule and returns the updated schedule. */
    patch: operations['updateSchedule'];
  };
  '/user/{id}': {
    /** Provides information about the user with the given ID. */
    get: operations['getUser'];
  };
  '/workflow/{id}': {
    /** Returns summary fields of a workflow by ID. */
    get: operations['getWorkflowById'];
  };
  '/workflow/{id}/approve/{approval_request_id}': {
    /** Approves a pending approval job in a workflow. */
    post: operations['approvePendingApprovalJobById'];
  };
  '/workflow/{id}/cancel': {
    /** Cancels a running workflow. */
    post: operations['cancelWorkflow'];
  };
  '/workflow/{id}/job': {
    /** Returns a sequence of jobs for a workflow. */
    get: operations['listWorkflowJobs'];
  };
  '/workflow/{id}/rerun': {
    /** Reruns a workflow. */
    post: operations['rerunWorkflow'];
  };
}

export interface components {}

export interface operations {
  /** List all contexts for an owner. */
  listContexts: {
    parameters: {
      query: {
        /** The unique ID of the owner of the context. Specify either this or owner-slug. */
        'owner-id'?: string;
        /** A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts. */
        'owner-slug'?: string;
        /** The type of the owner. Defaults to "organization". Accounts are only used as context owners in server. */
        'owner-type'?: 'account' | 'organization';
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
      };
    };
    responses: {
      /** A paginated list of contexts */
      200: {
        content: {
          'application/json': {
            items: {
              /**
               * Format: uuid
               * @description The unique ID of the context.
               */
              id: string;
              /** @description The user defined name of the context. */
              name: string;
              /**
               * Format: date-time
               * @description The date and time the context was created.
               * @example 2015-09-21T17:29:21.042Z
               */
              created_at: string;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  createContext: {
    responses: {
      /** The new context */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the context.
             */
            id: string;
            /** @description The user defined name of the context. */
            name: string;
            /**
             * Format: date-time
             * @description The date and time the context was created.
             * @example 2015-09-21T17:29:21.042Z
             */
            created_at: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The user defined name of the context. */
          name: string;
          owner:
            | {
                /**
                 * Format: uuid
                 * @description The unique ID of the owner of the context. Specify either this or slug.
                 */
                id: string;
                /**
                 * @description The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
                 * @example organization
                 * @enum {string}
                 */
                type?: 'account' | 'organization';
              }
            | {
                /** @description A string that represents an organization. Specify either this or id. Cannot be used for accounts. */
                slug: string;
                /**
                 * @description The type of owner. Defaults to "organization". Accounts are only used as context owners in server and must be specified by an id instead of a slug.
                 * @enum {string}
                 */
                type?: 'organization';
              };
        };
      };
    };
  };
  /** Returns basic information about a context. */
  getContext: {
    parameters: {
      path: {
        /** ID of the context (UUID) */
        'context-id': string;
      };
    };
    responses: {
      /** The context */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the context.
             */
            id: string;
            /** @description The user defined name of the context. */
            name: string;
            /**
             * Format: date-time
             * @description The date and time the context was created.
             * @example 2015-09-21T17:29:21.042Z
             */
            created_at: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  deleteContext: {
    parameters: {
      path: {
        /** ID of the context (UUID) */
        'context-id': string;
      };
    };
    responses: {
      /** A confirmation message */
      200: {
        content: {
          'application/json': {
            /** @description A human-readable message */
            message: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** List information about environment variables in a context, not including their values. */
  listEnvironmentVariablesFromContext: {
    parameters: {
      path: {
        /** ID of the context (UUID) */
        'context-id': string;
      };
    };
    responses: {
      /** A paginated list of environment variables */
      200: {
        content: {
          'application/json': {
            items: {
              /**
               * @description The name of the environment variable
               * @example POSTGRES_USER
               */
              variable: string;
              /**
               * Format: date-time
               * @description The date and time the environment variable was created.
               * @example 2015-09-21T17:29:21.042Z
               */
              created_at: string;
              /**
               * Format: uuid
               * @description ID of the context (UUID)
               */
              context_id: string;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Create or update an environment variable within a context. Returns information about the environment variable, not including its value. */
  addEnvironmentVariableToContext: {
    parameters: {
      path: {
        /** ID of the context (UUID) */
        'context-id': string;
        /** The name of the environment variable */
        'env-var-name': string;
      };
    };
    responses: {
      /** The new environment variable */
      200: {
        content: {
          'application/json': Partial<{
            /**
             * @description The name of the environment variable
             * @example POSTGRES_USER
             */
            variable: string;
            /**
             * Format: date-time
             * @description The date and time the environment variable was created.
             * @example 2015-09-21T17:29:21.042Z
             */
            created_at: string;
            /**
             * Format: uuid
             * @description ID of the context (UUID)
             */
            context_id: string;
          }> &
            Partial<{
              /** @description A human-readable message */
              message: string;
            }>;
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The value of the environment variable
           * @example some-secret-value
           */
          value: string;
        };
      };
    };
  };
  /** Delete an environment variable from a context. */
  deleteEnvironmentVariableFromContext: {
    parameters: {
      path: {
        /** The name of the environment variable */
        'env-var-name': string;
        /** ID of the context (UUID) */
        'context-id': string;
      };
    };
    responses: {
      /** A confirmation message */
      200: {
        content: {
          'application/json': {
            /** @description A human-readable message */
            message: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Get summary metrics and trends for a project at workflow and branch level.
   *              Workflow runs going back at most 90 days are included in the aggregation window.
   *              Trends are only supported upto last 30 days.
   *              Metrics are refreshed daily, and thus may not include executions from the last 24 hours.
   *              Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
   *              The most up to date credit information can be found in Plan Overview in the CircleCI UI.
   */
  getProjectWorkflowsPageData: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
      query: {
        /** The time window used to calculate summary metrics. */
        'reporting-window'?:
          | 'last-7-days'
          | 'last-90-days'
          | 'last-24-hours'
          | 'last-30-days'
          | 'last-60-days';
        /** The names of VCS branches to include in branch-level workflow metrics. */
        branches?: { [key: string]: unknown };
        /** The names of workflows to include in workflow-level metrics. */
        'workflow-names'?: { [key: string]: unknown };
      };
    };
    responses: {
      /** Aggregated summary metrics and trends by workflow and branches */
      200: {
        content: {
          'application/json': {
            /** @description The unique ID of the organization */
            org_id?: unknown;
            /** @description The unique ID of the project */
            project_id?: unknown;
            /** @description Metrics and trends data aggregated for a given project. */
            project_data?: {
              /** @description Metrics aggregated across all workflows and branches for a project. */
              metrics: {
                /**
                 * Format: int64
                 * @description The total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: int64
                 * @description Total duration, in seconds.
                 */
                total_duration_secs: number;
                /**
                 * Format: int64
                 * @description The total credits consumed over the current timeseries interval.
                 */
                total_credits_used: number;
                /** Format: float */
                success_rate: number;
                /**
                 * Format: float
                 * @description The average number of runs per day.
                 */
                throughput: number;
              };
              /** @description Metric trends aggregated across all workflows and branches for a project. */
              trends: {
                /**
                 * Format: float
                 * @description The trend value for total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: float
                 * @description Trend value for total duration.
                 */
                total_duration_secs: number;
                /**
                 * Format: float
                 * @description The trend value for total credits consumed.
                 */
                total_credits_used: number;
                /**
                 * Format: float
                 * @description The trend value for the success rate.
                 */
                success_rate: number;
                /**
                 * Format: float
                 * @description Trend value for the average number of runs per day.
                 */
                throughput: number;
              };
            };
            /** @description A list of metrics and trends data for workflows for a given project. */
            project_workflow_data?: {
              /**
               * @description The name of the workflow.
               * @example build-and-test
               */
              workflow_name: string;
              /** @description Metrics aggregated across a workflow or branchfor a project. */
              metrics: {
                /**
                 * Format: int64
                 * @description The total credits consumed over the current timeseries interval.
                 */
                total_credits_used: number;
                /**
                 * Format: float
                 * @description The 95th percentile duration among a group of workflow runs.
                 */
                p95_duration_secs: number;
                /**
                 * Format: int64
                 * @description The total number of runs.
                 */
                total_runs: number;
                /** Format: float */
                success_rate: number;
              };
              /** @description Trends aggregated across a workflow or branch for a project. */
              trends: {
                /**
                 * Format: float
                 * @description The trend value for total credits consumed.
                 */
                total_credits_used: number;
                /**
                 * Format: float
                 * @description The 95th percentile duration among a group of workflow runs.
                 */
                p95_duration_secs: number;
                /**
                 * Format: float
                 * @description The trend value for total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: float
                 * @description The trend value for the success rate.
                 */
                success_rate: number;
              };
            }[];
            /** @description A list of metrics and trends data for branches for a given project. */
            project_workflow_branch_data?: {
              /**
               * @description The name of the workflow.
               * @example build-and-test
               */
              workflow_name: string;
              /**
               * @description The VCS branch of a workflow's trigger.
               * @example main
               */
              branch: string;
              /** @description Metrics aggregated across a workflow or branchfor a project. */
              metrics: {
                /**
                 * Format: int64
                 * @description The total credits consumed over the current timeseries interval.
                 */
                total_credits_used: number;
                /**
                 * Format: float
                 * @description The 95th percentile duration among a group of workflow runs.
                 */
                p95_duration_secs: number;
                /**
                 * Format: int64
                 * @description The total number of runs.
                 */
                total_runs: number;
                /** Format: float */
                success_rate: number;
              };
              /** @description Trends aggregated across a workflow or branch for a project. */
              trends: {
                /**
                 * Format: float
                 * @description The trend value for total credits consumed.
                 */
                total_credits_used: number;
                /**
                 * Format: float
                 * @description The 95th percentile duration among a group of workflow runs.
                 */
                p95_duration_secs: number;
                /**
                 * Format: float
                 * @description The trend value for total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: float
                 * @description The trend value for the success rate.
                 */
                success_rate: number;
              };
            }[];
            /** @description A list of all the branches for a given project. */
            all_branches?: string[];
            /** @description A list of all the workflows for a given project. */
            all_workflows?: string[];
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /**
   * If no query parameters are supplied, will return timeseries data for all workflows that have ran on the default branch.
   *
   *             When granularity is `hourly`, up to 48 hours of timeseries data will be returned. When granularity is `daily`, up to 90 days of timeseries data will be returned.
   *
   *             Different combinations of branches and workflow-names can narrow the query further:
   *
   *              * All workflows, default branch (default, no query parameters)
   *              * All workflows, all branches: `all-branches=true`
   *              * All workflows on specific branch: `branch=feature-branch`
   *              * A specified workflow, all branches: `workflow-name=build&all-branches=true`,
   *              * A specified branch on a specified workflow: `workflow-name=build&branch=feature-branch`
   */
  getWorkflowTimeseries: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
      query: {
        /** The name of a vcs branch. If not passed we will scope the API call to the default branch. */
        branch?: string;
        /** Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. */
        'all-branches'?: boolean;
        /** The granularity for which to query timeseries data. */
        'timeseries-granularity'?: 'daily' | 'hourly';
        /** The name of a workflow. If not passed we will scope the API call to the project. */
        'workflow-name'?: string;
        /** Include only executions that started at or after this date. This must be specified if an end-date is provided. */
        'start-date'?: string;
        /** Include only executions that started before this date. This date can be at most 90 days after the start-date. */
        'end-date'?: string;
      };
    };
    responses: {
      /** An array of timeseries data, one entry per workflow. */
      200: {
        content: {
          'application/json': {
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
            /** @description Aggregate metrics for a workflow at a time granularity */
            items: {
              /**
               * @description The name of the workflow.
               * @example build-and-test
               */
              name: string;
              /**
               * Format: date-time
               * @description The start time for the earliest execution included in the metrics.
               */
              min_started_at: string;
              /**
               * Format: date-time
               * @description The end time of the last execution included in the metrics.
               */
              max_ended_at: string;
              /**
               * Format: date-time
               * @description The start of the interval for timeseries metrics.
               */
              timestamp: string;
              /** @description Metrics relating to a workflow's runs. */
              metrics: {
                /**
                 * Format: int64
                 * @description The total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: int64
                 * @description The number of failed runs.
                 */
                failed_runs: number;
                /**
                 * Format: int64
                 * @description The number of successful runs.
                 */
                successful_runs: number;
                /**
                 * Format: float
                 * @description The average number of runs per day.
                 */
                throughput: number;
                /**
                 * Format: int64
                 * @description The median credits consumed over the current timeseries interval.
                 */
                median_credits_used: number;
                /**
                 * Format: int64
                 * @description The total credits consumed over the current timeseries interval.
                 */
                total_credits_used: number;
                /** @description Metrics relating to the duration of runs for a workflow. */
                duration_metrics: {
                  /**
                   * Format: int64
                   * @description The minimum duration, in seconds, among a group of runs.
                   */
                  min: number;
                  /**
                   * Format: int64
                   * @description The median duration, in seconds, among a group of runs.
                   */
                  median: number;
                  /**
                   * Format: int64
                   * @description The max duration, in seconds, among a group of runs.
                   */
                  max: number;
                  /**
                   * Format: int64
                   * @description The 95th percentile duration, in seconds, among a group of runs.
                   */
                  p95: number;
                  /**
                   * Format: int64
                   * @description The total duration, in seconds, added across a group of runs.
                   */
                  total: number;
                };
              };
            }[];
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get timeseries data for all jobs within a workflow. */
  getJobTimeseries: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** The name of the workflow. */
        'workflow-name': string;
      };
      query: {
        /** The name of a vcs branch. If not passed we will scope the API call to the default branch. */
        branch?: string;
        /** The granularity for which to query timeseries data. */
        'timeseries-granularity'?: 'daily' | 'hourly';
        /** Include only executions that started at or after this date. This must be specified if an end-date is provided. */
        'start-date'?: string;
        /** Include only executions that started before this date. This date can be at most 90 days after the start-date. */
        'end-date'?: string;
      };
    };
    responses: {
      /** An array of timeseries data, one entry per job. */
      200: {
        content: {
          'application/json': {
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
            /** @description Aggregate metrics for a workflow at a time granularity */
            items: {
              /**
               * @description The name of the workflow.
               * @example build-and-test
               */
              name: string;
              /**
               * Format: date-time
               * @description The start time for the earliest execution included in the metrics.
               */
              min_started_at: string;
              /**
               * Format: date-time
               * @description The end time of the last execution included in the metrics.
               */
              max_ended_at: string;
              /**
               * Format: date-time
               * @description The start of the interval for timeseries metrics.
               */
              timestamp: string;
              /** @description Metrics relating to a workflow's runs. */
              metrics: {
                /**
                 * Format: int64
                 * @description The total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: int64
                 * @description The number of failed runs.
                 */
                failed_runs: number;
                /**
                 * Format: int64
                 * @description The number of successful runs.
                 */
                successful_runs: number;
                /**
                 * Format: float
                 * @description The average number of runs per day.
                 */
                throughput: number;
                /**
                 * Format: int64
                 * @description The median credits consumed over the current timeseries interval.
                 */
                median_credits_used: number;
                /**
                 * Format: int64
                 * @description The total credits consumed over the current timeseries interval.
                 */
                total_credits_used: number;
                /** @description Metrics relating to the duration of runs for a workflow. */
                duration_metrics: {
                  /**
                   * Format: int64
                   * @description The minimum duration, in seconds, among a group of runs.
                   */
                  min: number;
                  /**
                   * Format: int64
                   * @description The median duration, in seconds, among a group of runs.
                   */
                  median: number;
                  /**
                   * Format: int64
                   * @description The max duration, in seconds, among a group of runs.
                   */
                  max: number;
                  /**
                   * Format: int64
                   * @description The 95th percentile duration, in seconds, among a group of runs.
                   */
                  p95: number;
                  /**
                   * Format: int64
                   * @description The total duration, in seconds, added across a group of runs.
                   */
                  total: number;
                };
              };
            }[];
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Gets aggregated summary metrics with trends for the entire org.
   *               Also gets aggregated metrics and trends for each project belonging to the org.
   */
  getOrgSummaryData: {
    parameters: {
      path: {
        /** Org slug in the form `vcs-slug/org-name`. The `/` characters may be URL-escaped. */
        'org-slug': string;
      };
      query: {
        /** The time window used to calculate summary metrics. */
        'reporting-window'?:
          | 'last-7-days'
          | 'last-90-days'
          | 'last-24-hours'
          | 'last-30-days'
          | 'last-60-days';
        /** List of project names. */
        'project-names'?: { [key: string]: unknown };
      };
    };
    responses: {
      /** summary metrics with trends for an entire org and it's projects. */
      200: {
        content: {
          'application/json': {
            /** @description Aggregated metrics for an org, with trends. */
            org_data: {
              /** @description Metrics for a single org metrics. */
              metrics: {
                /**
                 * Format: int64
                 * @description The total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: int64
                 * @description Total duration, in seconds.
                 */
                total_duration_secs: number;
                /**
                 * Format: int64
                 * @description The total credits consumed over the current timeseries interval.
                 */
                total_credits_used: number;
                /** Format: float */
                success_rate: number;
                /**
                 * Format: float
                 * @description The average number of runs per day.
                 */
                throughput: number;
              };
              /** @description Trends for a single org. */
              trends: {
                /**
                 * Format: float
                 * @description The trend value for total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: float
                 * @description Trend value for total duration.
                 */
                total_duration_secs: number;
                /**
                 * Format: float
                 * @description The trend value for total credits consumed.
                 */
                total_credits_used: number;
                /**
                 * Format: float
                 * @description The trend value for the success rate.
                 */
                success_rate: number;
                /**
                 * Format: float
                 * @description Trend value for the average number of runs per day.
                 */
                throughput: number;
              };
            };
            /** @description Metrics for a single project, across all branches */
            org_project_data: {
              /**
               * @description The name of the project.
               * @example api-preview-docs
               */
              project_name: string;
              /** @description Metrics for a single project, across all branches. */
              metrics: {
                /**
                 * Format: int64
                 * @description The total credits consumed over the current timeseries interval.
                 */
                total_credits_used: number;
                /**
                 * Format: int64
                 * @description Total duration, in seconds.
                 */
                total_duration_secs: number;
                /**
                 * Format: int64
                 * @description The total number of runs.
                 */
                total_runs: number;
                /** Format: float */
                success_rate: number;
              };
              /** @description Trends for a single project, across all branches. */
              trends: {
                /**
                 * Format: float
                 * @description The trend value for total credits consumed.
                 */
                total_credits_used: number;
                /**
                 * Format: float
                 * @description Trend value for total duration.
                 */
                total_duration_secs: number;
                /**
                 * Format: float
                 * @description The trend value for total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: float
                 * @description The trend value for the success rate.
                 */
                success_rate: number;
              };
            }[];
            /** @description A list of all the project names in the organization. */
            all_projects: string[];
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. */
  getAllInsightsBranches: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
      query: {
        /** The name of a workflow. If not passed we will scope the API call to the project. */
        'workflow-name'?: string;
      };
    };
    responses: {
      /** A list of branches for a project */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Get a list of flaky tests for a given project. Flaky tests are branch agnostic.
   *              A flaky test is a test that passed and faliled in the same commit.
   */
  getFlakyTests: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** A list of flaky tests for a project */
      200: {
        content: {
          'application/json': {
            /** @description A list of flaky tests */
            'flaky-tests': {
              'time-wasted'?: number & number;
              /** @description The date and time when workflow was created. */
              'workflow-created-at': unknown;
              /** @description The ID of the workflow associated with the provided test counts */
              'workflow-id': unknown;
              /** @description The class the test belongs to. */
              classname: string;
              /** @description The number of the pipeline. */
              'pipeline-number': number & number;
              /** @description The name of the workflow. */
              'workflow-name': string;
              /** @description The name of the test. */
              'test-name': string;
              /** @description The name of the job. */
              'job-name': string;
              /** @description The number of the job. */
              'job-number': number & number;
              /**
               * Format: int64
               * @description The number of times the test flaked.
               */
              'times-flaked': number;
              /** @description The source of the test. */
              source: string;
              /** @description The file the test belongs to. */
              file: string;
            }[];
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get summary metrics for a project's workflows. Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI. */
  getProjectWorkflowMetrics: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
      query: {
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
        /** Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. */
        'all-branches'?: boolean;
        /** The name of a vcs branch. If not passed we will scope the API call to the default branch. */
        branch?: string;
        /** The time window used to calculate summary metrics. */
        'reporting-window'?:
          | 'last-7-days'
          | 'last-90-days'
          | 'last-24-hours'
          | 'last-30-days'
          | 'last-60-days';
      };
    };
    responses: {
      /** A paginated list of summary metrics by workflow */
      200: {
        content: {
          'application/json': {
            /** @description Workflow summary metrics. */
            items: {
              /**
               * @description The name of the workflow.
               * @example build-and-test
               */
              name: string;
              /**
               * Format: date-time
               * @description The start of the aggregation window for workflow metrics.
               */
              window_start: string;
              /**
               * Format: date-time
               * @description The end of the aggregation window for workflow metrics.
               */
              window_end: string;
              /** @description Metrics relating to a workflow's runs. */
              metrics: {
                /**
                 * Format: int64
                 * @description The total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: int64
                 * @description The number of successful runs.
                 */
                successful_runs: number;
                /**
                 * Format: int64
                 * @description The mean time to recovery (mean time between failures and their next success) in seconds.
                 */
                mttr: number;
                /**
                 * Format: int64
                 * @description The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
                 */
                total_credits_used: number;
                /**
                 * Format: int64
                 * @description The number of failed runs.
                 */
                failed_runs: number;
                /** Format: float */
                success_rate: number;
                /** @description Metrics relating to the duration of runs for a workflow. */
                duration_metrics: {
                  /**
                   * Format: int64
                   * @description The minimum duration, in seconds, among a group of runs.
                   */
                  min: number;
                  /**
                   * Format: int64
                   * @description The mean duration, in seconds, among a group of runs.
                   */
                  mean: number;
                  /**
                   * Format: int64
                   * @description The median duration, in seconds, among a group of runs.
                   */
                  median: number;
                  /**
                   * Format: int64
                   * @description The 95th percentile duration, in seconds, among a group of runs.
                   */
                  p95: number;
                  /**
                   * Format: int64
                   * @description The max duration, in seconds, among a group of runs.
                   */
                  max: number;
                  /**
                   * Format: float
                   * @description The standard deviation, in seconds, among a group of runs.
                   */
                  standard_deviation: number;
                };
                /**
                 * Format: int64
                 * @description The number of recovered workflow executions per day.
                 */
                total_recoveries: number;
                /**
                 * Format: float
                 * @description The average number of runs per day.
                 */
                throughput: number;
              };
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI. */
  getProjectWorkflowRuns: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** The name of the workflow. */
        'workflow-name': string;
      };
      query: {
        /** Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. */
        'all-branches'?: boolean;
        /** The name of a vcs branch. If not passed we will scope the API call to the default branch. */
        branch?: string;
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
        /** Include only executions that started at or after this date. This must be specified if an end-date is provided. */
        'start-date'?: string;
        /** Include only executions that started before this date. This date can be at most 90 days after the start-date. */
        'end-date'?: string;
      };
    };
    responses: {
      /** A paginated list of recent workflow runs */
      200: {
        content: {
          'application/json': {
            /** @description Recent workflow runs. */
            items: {
              /**
               * Format: uuid
               * @description The unique ID of the workflow.
               */
              id: string;
              /**
               * @description The VCS branch of a Workflow's trigger.
               * @example main
               */
              branch: string;
              /**
               * Format: int64
               * @description The duration in seconds of a run.
               */
              duration: number;
              /**
               * Format: date-time
               * @description The date and time the workflow was created.
               */
              created_at: string;
              /**
               * Format: date-time
               * @description The date and time the workflow stopped.
               */
              stopped_at: string;
              /**
               * Format: int64
               * @description The number of credits used during execution. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
               */
              credits_used: number;
              /**
               * @description Workflow status.
               * @enum {string}
               */
              status:
                | 'success'
                | 'failed'
                | 'error'
                | 'canceled'
                | 'unauthorized';
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get summary metrics for a project workflow's jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI. */
  getProjectWorkflowJobMetrics: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** The name of the workflow. */
        'workflow-name': string;
      };
      query: {
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
        /** Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. */
        'all-branches'?: boolean;
        /** The name of a vcs branch. If not passed we will scope the API call to the default branch. */
        branch?: string;
        /** The time window used to calculate summary metrics. */
        'reporting-window'?:
          | 'last-7-days'
          | 'last-90-days'
          | 'last-24-hours'
          | 'last-30-days'
          | 'last-60-days';
      };
    };
    responses: {
      /** A paginated list of summary metrics by workflow job. */
      200: {
        content: {
          'application/json': {
            /** @description Job summary metrics. */
            items: {
              /** @description The name of the job. */
              name: string;
              /**
               * Format: date-time
               * @description The start of the aggregation window for job metrics.
               */
              window_start: string;
              /**
               * Format: date-time
               * @description The end of the aggregation window for job metrics.
               */
              window_end: string;
              /** @description Metrics relating to a workflow job's runs. */
              metrics: {
                /** Format: float */
                success_rate: number;
                /**
                 * Format: int64
                 * @description The total number of runs.
                 */
                total_runs: number;
                /**
                 * Format: int64
                 * @description The number of failed runs.
                 */
                failed_runs: number;
                /**
                 * Format: int64
                 * @description The number of successful runs.
                 */
                successful_runs: number;
                /**
                 * Format: float
                 * @description The average number of runs per day.
                 */
                throughput: number;
                /**
                 * Format: int64
                 * @description The total credits consumed by the job in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
                 */
                total_credits_used: number;
                /** @description Metrics relating to the duration of runs for a workflow job. */
                duration_metrics: {
                  /**
                   * Format: int64
                   * @description The minimum duration, in seconds, among a group of runs.
                   */
                  min: number;
                  /**
                   * Format: int64
                   * @description The mean duration, in seconds, among a group of runs.
                   */
                  mean: number;
                  /**
                   * Format: int64
                   * @description The median duration, in seconds, among a group of runs.
                   */
                  median: number;
                  /**
                   * Format: int64
                   * @description The 95th percentile duration, in seconds, among a group of runs.
                   */
                  p95: number;
                  /**
                   * Format: int64
                   * @description The max duration, in seconds, among a group of runs.
                   */
                  max: number;
                  /**
                   * Format: float
                   * @description The standard deviation, in seconds, among a group of runs.
                   */
                  standard_deviation: number;
                };
              };
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get recent runs of a job within a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI. */
  getProjectJobRuns: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** The name of the workflow. */
        'workflow-name': string;
        /** The name of the job. */
        'job-name': string;
      };
      query: {
        /**
         * The name of a vcs branch. If not passed we will scope the API call to the default branch.
         *    Note - Querying all branches is not supported yet.
         */
        branch?: string;
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
        /** Include only executions that started at or after this date. This must be specified if an end-date is provided. */
        'start-date'?: string;
        /** Include only executions that started before this date. This date can be at most 90 days after the start-date. */
        'end-date'?: string;
      };
    };
    responses: {
      /** A paginated list of recent job runs */
      200: {
        content: {
          'application/json': {
            /** @description Recent job runs. */
            items: {
              /**
               * Format: uuid
               * @description The unique ID of the job.
               */
              id: string;
              /**
               * Format: date-time
               * @description The date and time the job started.
               */
              started_at: string;
              /**
               * Format: date-time
               * @description The time when the job stopped.
               */
              stopped_at: string;
              /**
               * @description Job status.
               * @enum {string}
               */
              status:
                | 'success'
                | 'not_run'
                | 'failed'
                | 'canceled'
                | 'unauthorized';
              /**
               * Format: int64
               * @description The duration in seconds of a run.
               */
              duration: number;
              /**
               * Format: int64
               * @description The number of credits used during execution. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
               */
              credits_used: number;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get the metrics and trends for a particular workflow on a single branch or all branches */
  getWorkflowSummary: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** The name of the workflow. */
        'workflow-name': string;
      };
      query: {
        /** Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. */
        'all-branches'?: boolean;
        /** The names of VCS branches to include in branch-level workflow metrics. */
        branches?: { [key: string]: unknown };
      };
    };
    responses: {
      /** Metrics and trends for a workflow */
      200: {
        content: {
          'application/json': {
            /** @description Metrics aggregated acrooss a workflow for a given time window. */
            metrics: {
              /**
               * Format: int64
               * @description The total number of runs.
               */
              total_runs: number;
              /**
               * Format: int64
               * @description The number of successful runs.
               */
              successful_runs: number;
              /**
               * Format: int64
               * @description The mean time to recovery (mean time between failures and their next success) in seconds.
               */
              mttr: number;
              /**
               * Format: int64
               * @description The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
               */
              total_credits_used: number;
              /**
               * Format: int64
               * @description The number of failed runs.
               */
              failed_runs: number;
              /** Format: float */
              success_rate: number;
              /**
               * Format: date-time
               * @description The start of the aggregation window for workflow metrics.
               */
              window_start: string;
              /** @description Metrics relating to the duration of runs for a workflow. */
              duration_metrics: {
                /**
                 * Format: int64
                 * @description The minimum duration, in seconds, among a group of runs.
                 */
                min: number;
                /**
                 * Format: int64
                 * @description The mean duration, in seconds, among a group of runs.
                 */
                mean: number;
                /**
                 * Format: int64
                 * @description The median duration, in seconds, among a group of runs.
                 */
                median: number;
                /**
                 * Format: int64
                 * @description The 95th percentile duration, in seconds, among a group of runs.
                 */
                p95: number;
                /**
                 * Format: int64
                 * @description The max duration, in seconds, among a group of runs.
                 */
                max: number;
                /**
                 * Format: float
                 * @description The standard deviation, in seconds, among a group of runs.
                 */
                standard_deviation: number;
              };
              /**
               * Format: date-time
               * @description The end of the aggregation window for workflow metrics.
               */
              window_end: string;
              /**
               * Format: float
               * @description The average number of runs per day.
               */
              throughput: number;
            };
            /** @description Trends for aggregated metrics acrooss a workflow for a given time window. */
            trends: {
              /**
               * Format: float
               * @description The trend value for total number of runs.
               */
              total_runs: number;
              /**
               * Format: float
               * @description The trend value for number of failed runs.
               */
              failed_runs: number;
              /**
               * Format: float
               * @description The trend value for the success rate.
               */
              success_rate: number;
              /**
               * Format: float
               * @description Trend value for the 95th percentile duration for a workflow for a given time window.
               */
              p95_duration_secs: number;
              /**
               * Format: float
               * @description Trend value for the 50th percentile duration for a workflow for a given time window.
               */
              median_duration_secs: number;
              /**
               * Format: float
               * @description The trend value for total credits consumed.
               */
              total_credits_used: number;
              /**
               * Format: float
               * @description trend for mean time to recovery (mean time between failures and their next success).
               */
              mttr: number;
              /**
               * Format: float
               * @description Trend value for the average number of runs per day.
               */
              throughput: number;
            };
            /** @description A list of all the workflow names for a given project. */
            workflow_names: string[];
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get test metrics for a project's workflows. Currently tests metrics are calculated based on 10 most recent workflow runs. */
  getProjectWorkflowTestMetrics: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** The name of the workflow. */
        'workflow-name': string;
      };
      query: {
        /** The name of a vcs branch. If not passed we will scope the API call to the default branch. */
        branch?: string;
        /** Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. */
        'all-branches'?: boolean;
      };
    };
    responses: {
      /** A list of test metrics by workflow */
      200: {
        content: {
          'application/json': {
            /**
             * Format: int64
             * @description The average number of tests executed per run
             */
            average_test_count: number;
            /** @description Metrics for the most frequently failing tests */
            most_failed_tests: {
              /**
               * Format: double
               * @description The 95th percentile duration, in seconds, among a group of test runs.
               */
              p95_duration: number;
              /**
               * Format: int64
               * @description The total number of times the test was run.
               */
              total_runs: number;
              /** @description The class the test belongs to. */
              classname: string;
              /**
               * Format: int64
               * @description The number of times the test failed
               */
              failed_runs: number;
              /** @description Whether the test is flaky. */
              flaky: boolean;
              /** @description The source of the test. */
              source: string;
              /** @description The file the test belongs to. */
              file: string;
              /** @description The name of the job. */
              job_name: string;
              /** @description The name of the test. */
              test_name: string;
            }[];
            /**
             * Format: int64
             * @description The number of tests with the same success rate being omitted from most_failed_tests
             */
            most_failed_tests_extra: number;
            /** @description Metrics for the slowest running tests */
            slowest_tests: {
              /**
               * Format: double
               * @description The 95th percentile duration, in seconds, among a group of test runs.
               */
              p95_duration: number;
              /**
               * Format: int64
               * @description The total number of times the test was run.
               */
              total_runs: number;
              /** @description The class the test belongs to. */
              classname: string;
              /**
               * Format: int64
               * @description The number of times the test failed
               */
              failed_runs: number;
              /** @description Whether the test is flaky. */
              flaky: boolean;
              /** @description The source of the test. */
              source: string;
              /** @description The file the test belongs to. */
              file: string;
              /** @description The name of the job. */
              job_name: string;
              /** @description The name of the test. */
              test_name: string;
            }[];
            /**
             * Format: int64
             * @description The number of tests with the same duration rate being omitted from slowest_tests
             */
            slowest_tests_extra: number;
            /**
             * Format: int64
             * @description The total number of test runs
             */
            total_test_runs: number;
            /** @description Test counts grouped by pipeline number and workflow id */
            test_runs: {
              /**
               * Format: int64
               * @description The number of the pipeline associated with the provided test counts
               */
              pipeline_number: number;
              /** @description The ID of the workflow associated with the provided test counts */
              workflow_id: unknown;
              /**
               * Format: float
               * @description The success rate calculated from test counts
               */
              success_rate: number;
              /** @description Test counts for a given pipeline number */
              test_counts: {
                /**
                 * Format: int64
                 * @description The number of tests with the error status
                 */
                error: number;
                /**
                 * Format: int64
                 * @description The number of tests with the failure status
                 */
                failure: number;
                /**
                 * Format: int64
                 * @description The number of tests with the skipped status
                 */
                skipped: number;
                /**
                 * Format: int64
                 * @description The number of tests with the success status
                 */
                success: number;
                /**
                 * Format: int64
                 * @description The total number of tests
                 */
                total: number;
              };
            }[];
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Provides information about the user that is currently signed in. */
  getCurrentUser: {
    responses: {
      /** User login information. */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the user.
             */
            id: string;
            /**
             * Login
             * @description The login information for the user on the VCS.
             */
            login: string;
            /** @description The name of the user. */
            name: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Provides the set of organizations of which a user is a member or a collaborator.
   *
   * The set of organizations that a user can collaborate on is composed of:
   *
   * * Organizations that the current user belongs to across VCS types (e.g. BitBucket, GitHub)
   * * The parent organization of repository that the user can collaborate on, but is not necessarily a member of
   * * The organization of the current user's account
   */
  getCollaborations: {
    responses: {
      /** Collaborations */
      200: {
        content: {
          'application/json': {
            /** @description The UUID of the organization */
            id: string;
            /** @description The VCS provider */
            'vcs-type': string;
            /** @description The name of the organization */
            name: string;
            /** @description URL to the user's avatar on the VCS */
            avatar_url: string;
            /** @description The slug of the organization */
            slug: string;
          }[];
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns all pipelines for the most recently built projects (max 250) you follow in an organization. */
  listPipelines: {
    parameters: {
      query: {
        /** Org slug in the form `vcs-slug/org-name` */
        'org-slug'?: string;
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
        /** Only include entries created by your user. */
        mine?: boolean;
      };
    };
    responses: {
      /** A sequence of pipelines. */
      200: {
        content: {
          'application/json': {
            items: {
              /**
               * Format: uuid
               * @description The unique ID of the pipeline.
               */
              id: string;
              /** @description A sequence of errors that have occurred within the pipeline. */
              errors: {
                /**
                 * @description The type of error.
                 * @enum {string}
                 */
                type:
                  | 'config'
                  | 'config-fetch'
                  | 'timeout'
                  | 'permission'
                  | 'plan';
                /** @description A human-readable error message. */
                message: string;
              }[];
              /**
               * @description The project-slug for the pipeline.
               * @example gh/CircleCI-Public/api-preview-docs
               */
              project_slug: string;
              /**
               * Format: date-time
               * @description The date and time the pipeline was last updated.
               */
              updated_at?: string;
              /**
               * Format: int64
               * @description The number of the pipeline.
               */
              number: number;
              trigger_parameters?: {
                [key: string]: Partial<number> &
                  Partial<string> &
                  Partial<boolean> &
                  Partial<{ [key: string]: unknown }>;
              };
              /**
               * @description The current state of the pipeline.
               * @enum {string}
               */
              state:
                | 'created'
                | 'errored'
                | 'setup-pending'
                | 'setup'
                | 'pending';
              /**
               * Format: date-time
               * @description The date and time the pipeline was created.
               */
              created_at: string;
              /** @description A summary of the trigger. */
              trigger: {
                /**
                 * @description The type of trigger.
                 * @enum {string}
                 */
                type: 'scheduled_pipeline' | 'explicit' | 'api' | 'webhook';
                /**
                 * Format: date-time
                 * @description The date and time the trigger was received.
                 */
                received_at: string;
                /** @description The user who triggered the Pipeline. */
                actor: {
                  /**
                   * Login
                   * @description The login information for the user on the VCS.
                   */
                  login: string;
                  /** @description URL to the user's avatar on the VCS */
                  avatar_url: string;
                };
              };
              /** @description VCS information for the pipeline. */
              vcs?: {
                /**
                 * @description Name of the VCS provider (e.g. GitHub, Bitbucket).
                 * @example GitHub
                 */
                provider_name: string;
                /**
                 * @description URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
                 * @example https://github.com/CircleCI-Public/api-preview-docs
                 */
                target_repository_url: string;
                /**
                 * @description The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
                 * @example feature/design-new-api
                 */
                branch?: string;
                /**
                 * @description The code review id.
                 * @example 123
                 */
                review_id?: string;
                /**
                 * @description The code review URL.
                 * @example https://github.com/CircleCI-Public/api-preview-docs/pull/123
                 */
                review_url?: string;
                /**
                 * @description The code revision the pipeline ran.
                 * @example f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
                 */
                revision: string;
                /**
                 * @description The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
                 * @example v3.1.4159
                 */
                tag?: string;
                /** @description The latest commit in the pipeline. */
                commit?: {
                  /** @description The subject of the commit message. */
                  subject: string;
                  /** @description The body of the commit message. */
                  body: string;
                };
                /**
                 * @description URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
                 * @example https://github.com/CircleCI-Public/api-preview-docs
                 */
                origin_repository_url: string;
              };
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Continue a pipeline from the setup phase. */
  continuePipeline: {
    responses: {
      /** A confirmation message. */
      200: {
        content: {
          'application/json': {
            /** @description A human-readable message */
            message: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * PipelineContinuationKey
           * @description A pipeline continuation key.
           */
          'continuation-key': string;
          /** @description A configuration string for the pipeline. */
          configuration: string;
          /**
           * @description An object containing pipeline parameters and their values.
           * @example [object Object]
           */
          parameters?: {
            [key: string]: Partial<number> & Partial<string> & Partial<boolean>;
          };
        };
      };
    };
  };
  /** Returns a pipeline by ID. */
  getPipelineById: {
    parameters: {
      path: {
        /** The unique ID of the pipeline. */
        'pipeline-id': string;
      };
    };
    responses: {
      /** A pipeline object. */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the pipeline.
             */
            id: string;
            /** @description A sequence of errors that have occurred within the pipeline. */
            errors: {
              /**
               * @description The type of error.
               * @enum {string}
               */
              type:
                | 'config'
                | 'config-fetch'
                | 'timeout'
                | 'permission'
                | 'plan';
              /** @description A human-readable error message. */
              message: string;
            }[];
            /**
             * @description The project-slug for the pipeline.
             * @example gh/CircleCI-Public/api-preview-docs
             */
            project_slug: string;
            /**
             * Format: date-time
             * @description The date and time the pipeline was last updated.
             */
            updated_at?: string;
            /**
             * Format: int64
             * @description The number of the pipeline.
             */
            number: number;
            trigger_parameters?: {
              [key: string]: Partial<number> &
                Partial<string> &
                Partial<boolean> &
                Partial<{ [key: string]: unknown }>;
            };
            /**
             * @description The current state of the pipeline.
             * @enum {string}
             */
            state:
              | 'created'
              | 'errored'
              | 'setup-pending'
              | 'setup'
              | 'pending';
            /**
             * Format: date-time
             * @description The date and time the pipeline was created.
             */
            created_at: string;
            /** @description A summary of the trigger. */
            trigger: {
              /**
               * @description The type of trigger.
               * @enum {string}
               */
              type: 'scheduled_pipeline' | 'explicit' | 'api' | 'webhook';
              /**
               * Format: date-time
               * @description The date and time the trigger was received.
               */
              received_at: string;
              /** @description The user who triggered the Pipeline. */
              actor: {
                /**
                 * Login
                 * @description The login information for the user on the VCS.
                 */
                login: string;
                /** @description URL to the user's avatar on the VCS */
                avatar_url: string;
              };
            };
            /** @description VCS information for the pipeline. */
            vcs?: {
              /**
               * @description Name of the VCS provider (e.g. GitHub, Bitbucket).
               * @example GitHub
               */
              provider_name: string;
              /**
               * @description URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
               * @example https://github.com/CircleCI-Public/api-preview-docs
               */
              target_repository_url: string;
              /**
               * @description The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
               * @example feature/design-new-api
               */
              branch?: string;
              /**
               * @description The code review id.
               * @example 123
               */
              review_id?: string;
              /**
               * @description The code review URL.
               * @example https://github.com/CircleCI-Public/api-preview-docs/pull/123
               */
              review_url?: string;
              /**
               * @description The code revision the pipeline ran.
               * @example f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
               */
              revision: string;
              /**
               * @description The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
               * @example v3.1.4159
               */
              tag?: string;
              /** @description The latest commit in the pipeline. */
              commit?: {
                /** @description The subject of the commit message. */
                subject: string;
                /** @description The body of the commit message. */
                body: string;
              };
              /**
               * @description URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
               * @example https://github.com/CircleCI-Public/api-preview-docs
               */
              origin_repository_url: string;
            };
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns a pipeline's configuration by ID. */
  getPipelineConfigById: {
    parameters: {
      path: {
        /** The unique ID of the pipeline. */
        'pipeline-id': string;
      };
    };
    responses: {
      /** The configuration strings for the pipeline. */
      200: {
        content: {
          'application/json': {
            /** @description The source configuration for the pipeline, before any config compilation has been performed. If there is no config, then this field will be empty. */
            source: string;
            /** @description The compiled configuration for the pipeline, after all orb expansion has been performed. If there were errors processing the pipeline's configuration, then this field may be empty. */
            compiled: string;
            /** @description The setup configuration for the pipeline used for Setup Workflows. If there were errors processing the pipeline's configuration or if setup workflows are not enabled, then this field should not exist */
            'setup-config'?: string;
            /** @description The compiled setup configuration for the pipeline, after all orb expansion has been performed. If there were errors processing the pipeline's setup workflows, then this field may be empty. */
            'compiled-setup-config'?: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns a paginated list of workflows by pipeline ID. */
  listWorkflowsByPipelineId: {
    parameters: {
      path: {
        /** The unique ID of the pipeline. */
        'pipeline-id': string;
      };
      query: {
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
      };
    };
    responses: {
      /** A paginated list of workflow objects. */
      200: {
        content: {
          'application/json': {
            /**
             * Workflow list
             * @description A list of workflows.
             */
            items: {
              /**
               * Format: uuid
               * @description The ID of the pipeline this workflow belongs to.
               */
              pipeline_id: string;
              /** Format: uuid */
              canceled_by?: string;
              /**
               * Format: uuid
               * @description The unique ID of the workflow.
               */
              id: string;
              /**
               * @description The name of the workflow.
               * @example build-and-test
               */
              name: string;
              /**
               * @description The project-slug for the pipeline this workflow belongs to.
               * @example gh/CircleCI-Public/api-preview-docs
               */
              project_slug: string;
              /** Format: uuid */
              errored_by?: string;
              /**
               * @description Tag used for the workflow
               * @example setup
               * @enum {string}
               */
              tag?: 'setup';
              /**
               * @description The current status of the workflow.
               * @enum {string}
               */
              status:
                | 'success'
                | 'running'
                | 'not_run'
                | 'failed'
                | 'error'
                | 'failing'
                | 'on_hold'
                | 'canceled'
                | 'unauthorized';
              /** Format: uuid */
              started_by: string;
              /**
               * Format: int64
               * @description The number of the pipeline this workflow belongs to.
               */
              pipeline_number: number;
              /**
               * Format: date-time
               * @description The date and time the workflow was created.
               */
              created_at: string;
              /**
               * Format: date-time
               * @description The date and time the workflow stopped.
               */
              stopped_at: string;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Retrieves a project by project slug. */
  getProjectBySlug: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** A project object */
      200: {
        content: {
          'application/json': {
            /**
             * @description Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
             * @example gh/CircleCI-Public/api-preview-docs
             */
            slug: string;
            /**
             * @description The name of the project
             * @example api-preview-docs
             */
            name: string;
            /**
             * @description The name of the organization the project belongs to
             * @example CircleCI-Public
             */
            organization_name: string;
            /** @description Information about the VCS that hosts the project source code. */
            vcs_info: {
              /**
               * @description URL to the repository hosting the project's code
               * @example https://github.com/CircleCI-Public/api-preview-docs
               */
              vcs_url: string;
              /**
               * @description The VCS provider
               * @enum {string}
               */
              provider: 'Bitbucket' | 'CircleCI' | 'GitHub';
              /** @example master */
              default_branch: string;
            };
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns a sequence of checkout keys for `:project`. */
  listCheckoutKeys: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** A sequence of checkout keys. */
      200: {
        content: {
          'application/json': {
            items: {
              /**
               * @description A public SSH key.
               * @example ssh-rsa ...
               */
              'public-key': string;
              /**
               * CheckoutKeyType
               * @description The type of checkout key. This may be either `deploy-key` or `github-user-key`.
               * @example deploy-key
               * @enum {string}
               */
              type: 'deploy-key' | 'github-user-key';
              /**
               * @description An SSH key fingerprint.
               * @example c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f
               */
              fingerprint: string;
              /**
               * @description A boolean value that indicates if this key is preferred.
               * @example true
               */
              preferred: boolean;
              /**
               * Format: date-time
               * @description The date and time the checkout key was created.
               * @example 2015-09-21T17:29:21.042Z
               */
              'created-at': string;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Creates a new checkout key. This API request is only usable with a user API token. */
  createCheckoutKey: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** The checkout key. */
      201: {
        content: {
          'application/json': {
            /**
             * @description A public SSH key.
             * @example ssh-rsa ...
             */
            'public-key': string;
            /**
             * CheckoutKeyType
             * @description The type of checkout key. This may be either `deploy-key` or `github-user-key`.
             * @example deploy-key
             * @enum {string}
             */
            type: 'deploy-key' | 'github-user-key';
            /**
             * @description An SSH key fingerprint.
             * @example c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f
             */
            fingerprint: string;
            /**
             * @description A boolean value that indicates if this key is preferred.
             * @example true
             */
            preferred: boolean;
            /**
             * Format: date-time
             * @description The date and time the checkout key was created.
             * @example 2015-09-21T17:29:21.042Z
             */
            'created-at': string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * CheckoutKeyInputType
           * @description The type of checkout key to create. This may be either `deploy-key` or `user-key`.
           * @example deploy-key
           * @enum {string}
           */
          type: 'user-key' | 'deploy-key';
        };
      };
    };
  };
  /** Returns an individual checkout key. */
  getCheckoutKey: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** An SSH key fingerprint. */
        fingerprint: string;
      };
    };
    responses: {
      /** The checkout key. */
      200: {
        content: {
          'application/json': {
            /**
             * @description A public SSH key.
             * @example ssh-rsa ...
             */
            'public-key': string;
            /**
             * CheckoutKeyType
             * @description The type of checkout key. This may be either `deploy-key` or `github-user-key`.
             * @example deploy-key
             * @enum {string}
             */
            type: 'deploy-key' | 'github-user-key';
            /**
             * @description An SSH key fingerprint.
             * @example c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f
             */
            fingerprint: string;
            /**
             * @description A boolean value that indicates if this key is preferred.
             * @example true
             */
            preferred: boolean;
            /**
             * Format: date-time
             * @description The date and time the checkout key was created.
             * @example 2015-09-21T17:29:21.042Z
             */
            'created-at': string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Deletes the checkout key. */
  deleteCheckoutKey: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** An SSH key fingerprint. */
        fingerprint: string;
      };
    };
    responses: {
      /** A confirmation message. */
      200: {
        content: {
          'application/json': {
            /** @description A human-readable message */
            message: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns four 'x' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website. */
  listEnvVars: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** A sequence of environment variables. */
      200: {
        content: {
          'application/json': {
            items: {
              /**
               * @description The name of the environment variable.
               * @example foo
               */
              name: string;
              /**
               * @description The value of the environment variable.
               * @example xxxx1234
               */
              value: string;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Creates a new environment variable. */
  createEnvVar: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** The environment variable. */
      201: {
        content: {
          'application/json': {
            /**
             * @description The name of the environment variable.
             * @example foo
             */
            name: string;
            /**
             * @description The value of the environment variable.
             * @example xxxx1234
             */
            value: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The name of the environment variable.
           * @example foo
           */
          name: string;
          /**
           * @description The value of the environment variable.
           * @example xxxx1234
           */
          value: string;
        };
      };
    };
  };
  /** Returns the masked value of environment variable :name. */
  getEnvVar: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** The name of the environment variable. */
        name: string;
      };
    };
    responses: {
      /** The environment variable. */
      200: {
        content: {
          'application/json': {
            /**
             * @description The name of the environment variable.
             * @example foo
             */
            name: string;
            /**
             * @description The value of the environment variable.
             * @example xxxx1234
             */
            value: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Deletes the environment variable named :name. */
  deleteEnvVar: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** The name of the environment variable. */
        name: string;
      };
    };
    responses: {
      /** A confirmation message. */
      200: {
        content: {
          'application/json': {
            /** @description A human-readable message */
            message: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns job details. */
  getJobDetails: {
    parameters: {
      path: {
        /** The number of the job. */
        'job-number': unknown;
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** Job details. */
      200: {
        content: {
          'application/json': {
            /** @description URL of the job in CircleCI Web UI. */
            web_url: string;
            /** @description Information about a project. */
            project: {
              /**
               * @description Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
               * @example gh/CircleCI-Public/api-preview-docs
               */
              slug: string;
              /**
               * @description The name of the project
               * @example api-preview-docs
               */
              name: string;
              /**
               * @description URL to the repository hosting the project's code
               * @example https://github.com/CircleCI-Public/api-preview-docs
               */
              external_url: string;
            };
            /** @description Info about parallels runs and their status. */
            parallel_runs: {
              /**
               * Format: int64
               * @description Index of the parallel run.
               */
              index: number;
              /** @description Status of the parallel run. */
              status: string;
            }[];
            /**
             * Format: date-time
             * @description The date and time the job started.
             */
            started_at: string;
            /** @description Info about the latest workflow the job was a part of. */
            latest_workflow: {
              /**
               * Format: uuid
               * @description The unique ID of the workflow.
               */
              id: string;
              /**
               * @description The name of the workflow.
               * @example build-and-test
               */
              name: string;
            };
            /** @description The name of the job. */
            name: string;
            /** @description Information about executor used for a job. */
            executor: {
              /** @description Resource class name. */
              resource_class: string;
              /** @description Executor type. */
              type?: string;
            };
            /**
             * Format: int64
             * @description A number of parallel runs the job has.
             */
            parallelism: number;
            /** @description The current status of the job. */
            status: unknown;
            /**
             * Format: int64
             * @description The number of the job.
             */
            number: number;
            /** @description Info about a pipeline the job is a part of. */
            pipeline: {
              /**
               * Format: uuid
               * @description The unique ID of the pipeline.
               */
              id: string;
            };
            /**
             * Format: int64
             * @description Duration of a job in milliseconds.
             */
            duration: number;
            /**
             * Format: date-time
             * @description The time when the job was created.
             */
            created_at: string;
            /** @description Messages from CircleCI execution platform. */
            messages: {
              /** @description Message type. */
              type: string;
              /** @description Information describing message. */
              message: string;
              /** @description Value describing the reason for message to be added to the job. */
              reason?: string;
            }[];
            /** @description List of contexts used by the job. */
            contexts: {
              /** @description The name of the context. */
              name: string;
            }[];
            /** @description Information about an organization. */
            organization: {
              /** @description The name of the organization. */
              name: string;
            };
            /**
             * Format: date-time
             * @description The time when the job was placed in a queue.
             */
            queued_at: string;
            /**
             * Format: date-time
             * @description The time when the job stopped.
             */
            stopped_at?: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Cancel job with a given job number. */
  cancelJob: {
    parameters: {
      path: {
        /** The number of the job. */
        'job-number': unknown;
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      202: {
        content: {
          'application/json': {
            /** @description A human-readable message */
            message: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns all pipelines for this project. */
  listPipelinesForProject: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
      query: {
        /** The name of a vcs branch. */
        branch?: string;
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
      };
    };
    responses: {
      /** A sequence of pipelines. */
      200: {
        content: {
          'application/json': {
            items: {
              /**
               * Format: uuid
               * @description The unique ID of the pipeline.
               */
              id: string;
              /** @description A sequence of errors that have occurred within the pipeline. */
              errors: {
                /**
                 * @description The type of error.
                 * @enum {string}
                 */
                type:
                  | 'config'
                  | 'config-fetch'
                  | 'timeout'
                  | 'permission'
                  | 'plan';
                /** @description A human-readable error message. */
                message: string;
              }[];
              /**
               * @description The project-slug for the pipeline.
               * @example gh/CircleCI-Public/api-preview-docs
               */
              project_slug: string;
              /**
               * Format: date-time
               * @description The date and time the pipeline was last updated.
               */
              updated_at?: string;
              /**
               * Format: int64
               * @description The number of the pipeline.
               */
              number: number;
              trigger_parameters?: {
                [key: string]: Partial<number> &
                  Partial<string> &
                  Partial<boolean> &
                  Partial<{ [key: string]: unknown }>;
              };
              /**
               * @description The current state of the pipeline.
               * @enum {string}
               */
              state:
                | 'created'
                | 'errored'
                | 'setup-pending'
                | 'setup'
                | 'pending';
              /**
               * Format: date-time
               * @description The date and time the pipeline was created.
               */
              created_at: string;
              /** @description A summary of the trigger. */
              trigger: {
                /**
                 * @description The type of trigger.
                 * @enum {string}
                 */
                type: 'scheduled_pipeline' | 'explicit' | 'api' | 'webhook';
                /**
                 * Format: date-time
                 * @description The date and time the trigger was received.
                 */
                received_at: string;
                /** @description The user who triggered the Pipeline. */
                actor: {
                  /**
                   * Login
                   * @description The login information for the user on the VCS.
                   */
                  login: string;
                  /** @description URL to the user's avatar on the VCS */
                  avatar_url: string;
                };
              };
              /** @description VCS information for the pipeline. */
              vcs?: {
                /**
                 * @description Name of the VCS provider (e.g. GitHub, Bitbucket).
                 * @example GitHub
                 */
                provider_name: string;
                /**
                 * @description URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
                 * @example https://github.com/CircleCI-Public/api-preview-docs
                 */
                target_repository_url: string;
                /**
                 * @description The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
                 * @example feature/design-new-api
                 */
                branch?: string;
                /**
                 * @description The code review id.
                 * @example 123
                 */
                review_id?: string;
                /**
                 * @description The code review URL.
                 * @example https://github.com/CircleCI-Public/api-preview-docs/pull/123
                 */
                review_url?: string;
                /**
                 * @description The code revision the pipeline ran.
                 * @example f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
                 */
                revision: string;
                /**
                 * @description The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
                 * @example v3.1.4159
                 */
                tag?: string;
                /** @description The latest commit in the pipeline. */
                commit?: {
                  /** @description The subject of the commit message. */
                  subject: string;
                  /** @description The body of the commit message. */
                  body: string;
                };
                /**
                 * @description URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
                 * @example https://github.com/CircleCI-Public/api-preview-docs
                 */
                origin_repository_url: string;
              };
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Triggers a new pipeline on the project. */
  triggerPipeline: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
      header: {
        /** The login or user-readable identifier for the pipeline's triggerer. Internal use only. */
        'x-attribution-login'?: string;
        /** The id the integration uses to identify the pipeline's triggerer. Internal use only. */
        'x-attribution-actor-id'?: string;
      };
    };
    responses: {
      /** The created pipeline. */
      201: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the pipeline.
             */
            id: string;
            /**
             * @description The current state of the pipeline.
             * @enum {string}
             */
            state:
              | 'created'
              | 'errored'
              | 'setup-pending'
              | 'setup'
              | 'pending';
            /**
             * Format: int64
             * @description The number of the pipeline.
             */
            number: number;
            /**
             * Format: date-time
             * @description The date and time the pipeline was created.
             */
            created_at: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
           * @example feature/design-new-api
           */
          branch?: string;
          /**
           * @description The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
           * @example v3.1.4159
           */
          tag?: string;
          /**
           * @description An object containing pipeline parameters and their values.
           * @example [object Object]
           */
          parameters?: {
            [key: string]: Partial<number> & Partial<string> & Partial<boolean>;
          };
        };
      };
    };
  };
  /** Returns a sequence of all pipelines for this project triggered by the user. */
  listMyPipelines: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
      query: {
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
      };
    };
    responses: {
      /** A sequence of pipelines. */
      200: {
        content: {
          'application/json': {
            items: {
              /**
               * Format: uuid
               * @description The unique ID of the pipeline.
               */
              id: string;
              /** @description A sequence of errors that have occurred within the pipeline. */
              errors: {
                /**
                 * @description The type of error.
                 * @enum {string}
                 */
                type:
                  | 'config'
                  | 'config-fetch'
                  | 'timeout'
                  | 'permission'
                  | 'plan';
                /** @description A human-readable error message. */
                message: string;
              }[];
              /**
               * @description The project-slug for the pipeline.
               * @example gh/CircleCI-Public/api-preview-docs
               */
              project_slug: string;
              /**
               * Format: date-time
               * @description The date and time the pipeline was last updated.
               */
              updated_at?: string;
              /**
               * Format: int64
               * @description The number of the pipeline.
               */
              number: number;
              trigger_parameters?: {
                [key: string]: Partial<number> &
                  Partial<string> &
                  Partial<boolean> &
                  Partial<{ [key: string]: unknown }>;
              };
              /**
               * @description The current state of the pipeline.
               * @enum {string}
               */
              state:
                | 'created'
                | 'errored'
                | 'setup-pending'
                | 'setup'
                | 'pending';
              /**
               * Format: date-time
               * @description The date and time the pipeline was created.
               */
              created_at: string;
              /** @description A summary of the trigger. */
              trigger: {
                /**
                 * @description The type of trigger.
                 * @enum {string}
                 */
                type: 'scheduled_pipeline' | 'explicit' | 'api' | 'webhook';
                /**
                 * Format: date-time
                 * @description The date and time the trigger was received.
                 */
                received_at: string;
                /** @description The user who triggered the Pipeline. */
                actor: {
                  /**
                   * Login
                   * @description The login information for the user on the VCS.
                   */
                  login: string;
                  /** @description URL to the user's avatar on the VCS */
                  avatar_url: string;
                };
              };
              /** @description VCS information for the pipeline. */
              vcs?: {
                /**
                 * @description Name of the VCS provider (e.g. GitHub, Bitbucket).
                 * @example GitHub
                 */
                provider_name: string;
                /**
                 * @description URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
                 * @example https://github.com/CircleCI-Public/api-preview-docs
                 */
                target_repository_url: string;
                /**
                 * @description The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
                 * @example feature/design-new-api
                 */
                branch?: string;
                /**
                 * @description The code review id.
                 * @example 123
                 */
                review_id?: string;
                /**
                 * @description The code review URL.
                 * @example https://github.com/CircleCI-Public/api-preview-docs/pull/123
                 */
                review_url?: string;
                /**
                 * @description The code revision the pipeline ran.
                 * @example f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
                 */
                revision: string;
                /**
                 * @description The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
                 * @example v3.1.4159
                 */
                tag?: string;
                /** @description The latest commit in the pipeline. */
                commit?: {
                  /** @description The subject of the commit message. */
                  subject: string;
                  /** @description The body of the commit message. */
                  body: string;
                };
                /**
                 * @description URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
                 * @example https://github.com/CircleCI-Public/api-preview-docs
                 */
                origin_repository_url: string;
              };
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns a pipeline by number. */
  getPipelineByNumber: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
        /** The number of the pipeline. */
        'pipeline-number': unknown;
      };
    };
    responses: {
      /** A pipeline object. */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the pipeline.
             */
            id: string;
            /** @description A sequence of errors that have occurred within the pipeline. */
            errors: {
              /**
               * @description The type of error.
               * @enum {string}
               */
              type:
                | 'config'
                | 'config-fetch'
                | 'timeout'
                | 'permission'
                | 'plan';
              /** @description A human-readable error message. */
              message: string;
            }[];
            /**
             * @description The project-slug for the pipeline.
             * @example gh/CircleCI-Public/api-preview-docs
             */
            project_slug: string;
            /**
             * Format: date-time
             * @description The date and time the pipeline was last updated.
             */
            updated_at?: string;
            /**
             * Format: int64
             * @description The number of the pipeline.
             */
            number: number;
            trigger_parameters?: {
              [key: string]: Partial<number> &
                Partial<string> &
                Partial<boolean> &
                Partial<{ [key: string]: unknown }>;
            };
            /**
             * @description The current state of the pipeline.
             * @enum {string}
             */
            state:
              | 'created'
              | 'errored'
              | 'setup-pending'
              | 'setup'
              | 'pending';
            /**
             * Format: date-time
             * @description The date and time the pipeline was created.
             */
            created_at: string;
            /** @description A summary of the trigger. */
            trigger: {
              /**
               * @description The type of trigger.
               * @enum {string}
               */
              type: 'scheduled_pipeline' | 'explicit' | 'api' | 'webhook';
              /**
               * Format: date-time
               * @description The date and time the trigger was received.
               */
              received_at: string;
              /** @description The user who triggered the Pipeline. */
              actor: {
                /**
                 * Login
                 * @description The login information for the user on the VCS.
                 */
                login: string;
                /** @description URL to the user's avatar on the VCS */
                avatar_url: string;
              };
            };
            /** @description VCS information for the pipeline. */
            vcs?: {
              /**
               * @description Name of the VCS provider (e.g. GitHub, Bitbucket).
               * @example GitHub
               */
              provider_name: string;
              /**
               * @description URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
               * @example https://github.com/CircleCI-Public/api-preview-docs
               */
              target_repository_url: string;
              /**
               * @description The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
               * @example feature/design-new-api
               */
              branch?: string;
              /**
               * @description The code review id.
               * @example 123
               */
              review_id?: string;
              /**
               * @description The code review URL.
               * @example https://github.com/CircleCI-Public/api-preview-docs/pull/123
               */
              review_url?: string;
              /**
               * @description The code revision the pipeline ran.
               * @example f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
               */
              revision: string;
              /**
               * @description The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
               * @example v3.1.4159
               */
              tag?: string;
              /** @description The latest commit in the pipeline. */
              commit?: {
                /** @description The subject of the commit message. */
                subject: string;
                /** @description The body of the commit message. */
                body: string;
              };
              /**
               * @description URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
               * @example https://github.com/CircleCI-Public/api-preview-docs
               */
              origin_repository_url: string;
            };
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns all schedules for this project. */
  listSchedulesForProject: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
      query: {
        /** A token to retrieve the next page of results. */
        'page-token'?: string;
      };
    };
    responses: {
      /** A sequence of schedules. */
      200: {
        content: {
          'application/json': {
            items: {
              /**
               * Format: uuid
               * @description The unique ID of the schedule.
               */
              id: string;
              /** @description Timetable that specifies when a schedule triggers. */
              timetable: {
                /**
                 * Format: integer
                 * @description Number of times a schedule triggers per hour, value must be between 1 and 60
                 */
                'per-hour': number;
                /** @description Hours in a day in which the schedule triggers. */
                'hours-of-day': number[];
                /** @description Days in a week in which the schedule triggers. */
                'days-of-week': (
                  | 'TUE'
                  | 'SAT'
                  | 'SUN'
                  | 'MON'
                  | 'THU'
                  | 'WED'
                  | 'FRI'
                )[];
              };
              /**
               * Format: date-time
               * @description The date and time the pipeline was last updated.
               */
              'updated-at': string;
              /** @description Name of the schedule. */
              name: string;
              /**
               * Format: date-time
               * @description The date and time the pipeline was created.
               */
              'created-at': string;
              /**
               * @description The project-slug for the schedule
               * @example gh/CircleCI-Public/api-preview-docs
               */
              'project-slug': string;
              /**
               * @description Pipeline parameters represented as key-value pairs. Must contain branch or tag.
               * @example [object Object]
               */
              parameters: {
                [key: string]: Partial<number> &
                  Partial<string> &
                  Partial<boolean>;
              };
              /**
               * User
               * @description The attribution actor who will run the scheduled pipeline.
               */
              actor: {
                /**
                 * Format: uuid
                 * @description The unique ID of the user.
                 */
                id: string;
                /**
                 * Login
                 * @description The login information for the user on the VCS.
                 */
                login: string;
                /** @description The name of the user. */
                name: string;
              };
              /** @description Description of the schedule. */
              description: string;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Creates a schedule and returns the created schedule. */
  createSchedule: {
    parameters: {
      path: {
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** A schedule object. */
      201: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the schedule.
             */
            id: string;
            /** @description Timetable that specifies when a schedule triggers. */
            timetable: {
              /**
               * Format: integer
               * @description Number of times a schedule triggers per hour, value must be between 1 and 60
               */
              'per-hour': number;
              /** @description Hours in a day in which the schedule triggers. */
              'hours-of-day': number[];
              /** @description Days in a week in which the schedule triggers. */
              'days-of-week': (
                | 'TUE'
                | 'SAT'
                | 'SUN'
                | 'MON'
                | 'THU'
                | 'WED'
                | 'FRI'
              )[];
            };
            /**
             * Format: date-time
             * @description The date and time the pipeline was last updated.
             */
            'updated-at': string;
            /** @description Name of the schedule. */
            name: string;
            /**
             * Format: date-time
             * @description The date and time the pipeline was created.
             */
            'created-at': string;
            /**
             * @description The project-slug for the schedule
             * @example gh/CircleCI-Public/api-preview-docs
             */
            'project-slug': string;
            /**
             * @description Pipeline parameters represented as key-value pairs. Must contain branch or tag.
             * @example [object Object]
             */
            parameters: {
              [key: string]: Partial<number> &
                Partial<string> &
                Partial<boolean>;
            };
            /**
             * User
             * @description The attribution actor who will run the scheduled pipeline.
             */
            actor: {
              /**
               * Format: uuid
               * @description The unique ID of the user.
               */
              id: string;
              /**
               * Login
               * @description The login information for the user on the VCS.
               */
              login: string;
              /** @description The name of the user. */
              name: string;
            };
            /** @description Description of the schedule. */
            description: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description Name of the schedule. */
          name: string;
          /** @description Timetable that specifies when a schedule triggers. */
          timetable: {
            /**
             * Format: integer
             * @description Number of times a schedule triggers per hour, value must be between 1 and 60
             */
            'per-hour': number;
            /** @description Hours in a day in which the schedule triggers. */
            'hours-of-day': number[];
            /** @description Days in a week in which the schedule triggers. */
            'days-of-week': (
              | 'TUE'
              | 'SAT'
              | 'SUN'
              | 'MON'
              | 'THU'
              | 'WED'
              | 'FRI'
            )[];
          };
          /**
           * @description The attribution-actor of the scheduled pipeline.
           * @example current
           * @enum {string}
           */
          'attribution-actor': 'current' | 'system';
          /**
           * @description Pipeline parameters represented as key-value pairs. Must contain branch or tag.
           * @example [object Object]
           */
          parameters: {
            [key: string]: Partial<number> & Partial<string> & Partial<boolean>;
          };
          /** @description Description of the schedule. */
          description?: string;
        };
      };
    };
  };
  /** Returns a job's artifacts. */
  getJobArtifacts: {
    parameters: {
      path: {
        /** The number of the job. */
        'job-number': unknown;
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** A paginated list of the job's artifacts. */
      200: {
        content: {
          'application/json': {
            items: {
              /** @description The artifact path. */
              path: string;
              /**
               * Format: int64
               * @description The index of the node that stored the artifact.
               */
              node_index: number;
              /** @description The URL to download the artifact contents. */
              url: string;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get test metadata for a build. In the rare case where there is more than 250MB of test data on the job, no results will be returned. */
  getTests: {
    parameters: {
      path: {
        /** The number of the job. */
        'job-number': unknown;
        /** Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. */
        'project-slug': string;
      };
    };
    responses: {
      /** A paginated list of test results. */
      200: {
        content: {
          'application/json': {
            /** TestsResponse */
            items: {
              /** @description The failure message associated with the test. */
              message: string;
              /** @description The program that generated the test results */
              source: string;
              /**
               * Format: double
               * @description The time it took to run the test in seconds
               */
              run_time: number;
              /** @description The file in which the test is defined. */
              file: string;
              /** @description Indication of whether the test succeeded. */
              result: string;
              /** @description The name of the test. */
              name: string;
              /** @description The programmatic location of the test. */
              classname: string;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Get a schedule by id. */
  getScheduleById: {
    parameters: {
      path: {
        /** The unique ID of the schedule. */
        'schedule-id': string;
      };
    };
    responses: {
      /** A schedule object. */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the schedule.
             */
            id: string;
            /** @description Timetable that specifies when a schedule triggers. */
            timetable: {
              /**
               * Format: integer
               * @description Number of times a schedule triggers per hour, value must be between 1 and 60
               */
              'per-hour': number;
              /** @description Hours in a day in which the schedule triggers. */
              'hours-of-day': number[];
              /** @description Days in a week in which the schedule triggers. */
              'days-of-week': (
                | 'TUE'
                | 'SAT'
                | 'SUN'
                | 'MON'
                | 'THU'
                | 'WED'
                | 'FRI'
              )[];
            };
            /**
             * Format: date-time
             * @description The date and time the pipeline was last updated.
             */
            'updated-at': string;
            /** @description Name of the schedule. */
            name: string;
            /**
             * Format: date-time
             * @description The date and time the pipeline was created.
             */
            'created-at': string;
            /**
             * @description The project-slug for the schedule
             * @example gh/CircleCI-Public/api-preview-docs
             */
            'project-slug': string;
            /**
             * @description Pipeline parameters represented as key-value pairs. Must contain branch or tag.
             * @example [object Object]
             */
            parameters: {
              [key: string]: Partial<number> &
                Partial<string> &
                Partial<boolean>;
            };
            /**
             * User
             * @description The attribution actor who will run the scheduled pipeline.
             */
            actor: {
              /**
               * Format: uuid
               * @description The unique ID of the user.
               */
              id: string;
              /**
               * Login
               * @description The login information for the user on the VCS.
               */
              login: string;
              /** @description The name of the user. */
              name: string;
            };
            /** @description Description of the schedule. */
            description: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Deletes the schedule by id. */
  deleteScheduleById: {
    parameters: {
      path: {
        /** The unique ID of the schedule. */
        'schedule-id': string;
      };
    };
    responses: {
      /** A confirmation message. */
      200: {
        content: {
          'application/json': {
            /** @description A human-readable message */
            message: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Updates a schedule and returns the updated schedule. */
  updateSchedule: {
    parameters: {
      path: {
        /** The unique ID of the schedule. */
        'schedule-id': string;
      };
    };
    responses: {
      /** A schedule object. */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the schedule.
             */
            id: string;
            /** @description Timetable that specifies when a schedule triggers. */
            timetable: {
              /**
               * Format: integer
               * @description Number of times a schedule triggers per hour, value must be between 1 and 60
               */
              'per-hour': number;
              /** @description Hours in a day in which the schedule triggers. */
              'hours-of-day': number[];
              /** @description Days in a week in which the schedule triggers. */
              'days-of-week': (
                | 'TUE'
                | 'SAT'
                | 'SUN'
                | 'MON'
                | 'THU'
                | 'WED'
                | 'FRI'
              )[];
            };
            /**
             * Format: date-time
             * @description The date and time the pipeline was last updated.
             */
            'updated-at': string;
            /** @description Name of the schedule. */
            name: string;
            /**
             * Format: date-time
             * @description The date and time the pipeline was created.
             */
            'created-at': string;
            /**
             * @description The project-slug for the schedule
             * @example gh/CircleCI-Public/api-preview-docs
             */
            'project-slug': string;
            /**
             * @description Pipeline parameters represented as key-value pairs. Must contain branch or tag.
             * @example [object Object]
             */
            parameters: {
              [key: string]: Partial<number> &
                Partial<string> &
                Partial<boolean>;
            };
            /**
             * User
             * @description The attribution actor who will run the scheduled pipeline.
             */
            actor: {
              /**
               * Format: uuid
               * @description The unique ID of the user.
               */
              id: string;
              /**
               * Login
               * @description The login information for the user on the VCS.
               */
              login: string;
              /** @description The name of the user. */
              name: string;
            };
            /** @description Description of the schedule. */
            description: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description Description of the schedule. */
          description?: string;
          /** @description Name of the schedule. */
          name?: string;
          /** @description Timetable that specifies when a schedule triggers. */
          timetable?: {
            /**
             * Format: integer
             * @description Number of times a schedule triggers per hour, value must be between 1 and 60
             */
            'per-hour'?: number;
            /** @description Hours in a day in which the schedule triggers. */
            'hours-of-day'?: number[];
            /** @description Days in a week in which the schedule triggers. */
            'days-of-week'?: (
              | 'TUE'
              | 'SAT'
              | 'SUN'
              | 'MON'
              | 'THU'
              | 'WED'
              | 'FRI'
            )[];
          };
          /**
           * @description The attribution-actor of the scheduled pipeline.
           * @example current
           * @enum {string}
           */
          'attribution-actor'?: 'current' | 'system';
          /**
           * @description Pipeline parameters represented as key-value pairs. Must contain branch or tag.
           * @example [object Object]
           */
          parameters?: {
            [key: string]: Partial<number> & Partial<string> & Partial<boolean>;
          };
        };
      };
    };
  };
  /** Provides information about the user with the given ID. */
  getUser: {
    parameters: {
      path: {
        /** The unique ID of the user. */
        id: string;
      };
    };
    responses: {
      /** User login information. */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The unique ID of the user.
             */
            id: string;
            /**
             * Login
             * @description The login information for the user on the VCS.
             */
            login: string;
            /** @description The name of the user. */
            name: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns summary fields of a workflow by ID. */
  getWorkflowById: {
    parameters: {
      path: {
        /** The unique ID of the workflow. */
        id: string;
      };
    };
    responses: {
      /** A workflow object. */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The ID of the pipeline this workflow belongs to.
             */
            pipeline_id: string;
            /** Format: uuid */
            canceled_by?: string;
            /**
             * Format: uuid
             * @description The unique ID of the workflow.
             */
            id: string;
            /**
             * @description The name of the workflow.
             * @example build-and-test
             */
            name: string;
            /**
             * @description The project-slug for the pipeline this workflow belongs to.
             * @example gh/CircleCI-Public/api-preview-docs
             */
            project_slug: string;
            /** Format: uuid */
            errored_by?: string;
            /**
             * @description Tag used for the workflow
             * @example setup
             * @enum {string}
             */
            tag?: 'setup';
            /**
             * @description The current status of the workflow.
             * @enum {string}
             */
            status:
              | 'success'
              | 'running'
              | 'not_run'
              | 'failed'
              | 'error'
              | 'failing'
              | 'on_hold'
              | 'canceled'
              | 'unauthorized';
            /** Format: uuid */
            started_by: string;
            /**
             * Format: int64
             * @description The number of the pipeline this workflow belongs to.
             */
            pipeline_number: number;
            /**
             * Format: date-time
             * @description The date and time the workflow was created.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The date and time the workflow stopped.
             */
            stopped_at: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Approves a pending approval job in a workflow. */
  approvePendingApprovalJobById: {
    parameters: {
      path: {
        /** The ID of the job being approved. */
        approval_request_id: string;
        /** The unique ID of the workflow. */
        id: string;
      };
    };
    responses: {
      /** A confirmation message. */
      202: {
        content: {
          'application/json': {
            /** @description A human-readable message */
            message: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Cancels a running workflow. */
  cancelWorkflow: {
    parameters: {
      path: {
        /** The unique ID of the workflow. */
        id: string;
      };
    };
    responses: {
      /** A confirmation message. */
      202: {
        content: {
          'application/json': {
            /** @description A human-readable message */
            message: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Returns a sequence of jobs for a workflow. */
  listWorkflowJobs: {
    parameters: {
      path: {
        /** The unique ID of the workflow. */
        id: string;
      };
    };
    responses: {
      /** A paginated sequence of jobs. */
      200: {
        content: {
          'application/json': {
            items: {
              /**
               * Format: uuid
               * @description The unique ID of the user.
               */
              canceled_by?: string;
              /** @description A sequence of the unique job IDs for the jobs that this job depends upon in the workflow. */
              dependencies: string[];
              /**
               * Format: int64
               * @description The number of the job.
               */
              job_number?: number;
              /**
               * Format: uuid
               * @description The unique ID of the job.
               */
              id: string;
              /**
               * Format: date-time
               * @description The date and time the job started.
               */
              started_at: string;
              /** @description The name of the job. */
              name: string;
              /**
               * Format: uuid
               * @description The unique ID of the user.
               */
              approved_by?: string;
              /**
               * @description The project-slug for the job.
               * @example gh/CircleCI-Public/api-preview-docs
               */
              project_slug: string;
              /** @description The current status of the job. */
              status: unknown;
              /**
               * @description The type of job.
               * @enum {string}
               */
              type: 'build' | 'approval';
              /**
               * Format: date-time
               * @description The time when the job stopped.
               */
              stopped_at?: string;
              /**
               * Format: uuid
               * @description The unique ID of the job.
               */
              approval_request_id?: string;
            }[];
            /** @description A token to pass as a `page-token` query parameter to return the next page of results. */
            next_page_token: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
  };
  /** Reruns a workflow. */
  rerunWorkflow: {
    parameters: {
      path: {
        /** The unique ID of the workflow. */
        id: string;
      };
    };
    responses: {
      /** A confirmation message. */
      202: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The ID of the newly-created workflow.
             * @example 0e53027b-521a-4c40-9042-47e72b3c63a3
             */
            workflow_id: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          'application/json': {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description Whether to enable SSH access for the triggering user on the newly-rerun job. Requires the jobs parameter to be used and so is mutually exclusive with the from_failed parameter. */
          enable_ssh?: boolean;
          /** @description Whether to rerun the workflow from the failed job. Mutually exclusive with the jobs parameter. */
          from_failed?: boolean;
          /**
           * @description A list of job IDs to rerun.
           * @example c65b68ef-e73b-4bf2-be9a-7a322a9df150,5e957edd-5e8c-4985-9178-5d0d69561822
           */
          jobs?: string[];
          /** @description Completes rerun using sparse trees logic, an optimization for workflows that have disconnected subgraphs. Requires jobs parameter and so is mutually exclusive with the from_failed parameter. */
          sparse_tree?: boolean;
        };
      };
    };
  };
}

export interface external {}
